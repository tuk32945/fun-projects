<?php
require_once(dirname(DRUPAL_ROOT) . DIRECTORY_SEPARATOR . 'edutier3/sites/all/modules/tu_framework_mod_disable/tu_framework_mod_disable.values.inc');
/**
 * Disable and uninstall the modules listed in the $modules array.
 */

define("SUB_DOMAIN", trim(explode('.', $_SERVER['HTTP_HOST'])[0]));

//dsm(AH_SITE_ENVIRONMENT);


/**
 * toggle_options() when called evaluates checked modules on form
 * and then enables or disables modules accordingly. (checked means disable)
 * this function code will be used in the form validate function
*/

function toggle_options(){
  global $modules_readable_name;
  $toggle_default = variable_get('tu_framework_mod_disable_toggle_each', array());

  if (empty($toggle_default)) {

            $modules_to_disable = $modules_readable_name;

          } else {
            foreach ($toggle_default as $key => $value){
              if (!$toggle_default[$key] == 0) {
                $modules_to_disable[$key] = $toggle_default[$key];
                //print_r($toggle_default[$value]);die;
                module_disable(array_values($modules_to_disable), FALSE);

              } else {
                  if ($toggle_default[$key] == 0) {
                    $modules_to_enable[$key] = $toggle_default[$key];
                    //print_r($toggle_default[$value]);die;
                    module_enable(array_keys($modules_to_enable), FALSE);

                  }
                }
            }
          }
        /** debug */

       print('below this is $modules_to_disable');
        ?><br><?php
        print_r($modules_to_disable);
         ?><br><?php
         print('below this is $toggle_default');
          ?><br><?php
        print_r($toggle_default);
        ?><br><?php  //debug
        print('below this is $modules_to_enable');
         ?><br><?php
         print_r($modules_to_enable);

        variable_set('tu_framework_mod_disable_toggle_each', $toggle_default);
}

function daily_cron_disable(){
  $current_time = time();
  $last_disable_run = variable_get('tu_framework_mod_disable_toggle_each_time');
  $last_run = 'less than 48 hours';
  $time_limit = 172800000;
  $time_diff = ($current_time - $last_disable_run);
  //$last_run = variable_get('cron_last', array());


  if($time_diff > $time_limit){

    //print(date('m-d-Y',$last_disable_run)); die;

      global $modules_readable_name;
      $modules_to_disable = $modules_readable_name;

      foreach ($modules_to_disable as $key => $value){
        $modules_to_disable[$key] = $key;
      }
      variable_set('tu_framework_mod_disable_toggle_each', $modules_to_disable);
      module_disable(array_keys($modules_to_disable), FALSE);
      variable_set('tu_framework_mod_disable_toggle_each_time', time());

  } /*else {
    print($last_run);
    ?><br><?php
    print($current_time);
    ?><br><?php
    print($time_diff);
  }*/

       /*

    if (!defined('AH_SITE_ENVIRONMENT')){
      define('AH_SITE_ENVIRONMENT', SUB_DOMAIN); //this line is for testing purposes outside of acquia environments where AH_SITE_ENVIRONMENT may not be defined already
    }

    if (defined('AH_SITE_ENVIRONMENT')) {

      if (AH_SITE_ENVIRONMENT !== 'dev') {
        module_disable(array_keys($modules_to_disable), FALSE);
      }

    }
  */
}


function tu_framework_mod_disable_cron() {
  if (variable_get('disable_execute', FALSE) == TRUE ){
    toggle_options();
    variable_set('disable_execute', FALSE);

  } else {
    daily_cron_disable();
  }

}

function tu_framework_mod_disable_permission(){
  return array(
  'administer tu_framework_mod_disable' => array(
    'title' => t('<em>TU Admin UI Disable</em> Access TU Framework Mod Disabler Configuration'),
    'description' =>  t('Administer Config for TU Mod Disabler'),
  ),
);
}

function tu_framework_mod_disable_menu() {

  $items = array();

  $items['admin/config/tu-config/tu-framework-mod-disable'] = array(
    'title' => 'TU Framework Module Disabler',
    'description' => 'Settings page related to Module Disabler.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tu_framework_mod_disable_settings'),
    'access arguments' => array('administer tu_framework_mod_disable'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function tu_framework_mod_disable_settings($form, &$form_state){

  global $modules_readable_name;
  $toggle_default = variable_get('tu_framework_mod_disable_toggle_each', array());
  $toggle_all = variable_get('tu_framework_mod_disable_toggle', array());

    /*  this if statement kind of operates
        as a one off forcing $toggle_default
        to view our .inc array vs affecting
        $modules_to_disable
        */
    if ($toggle_all == 1){
      $toggle_default = array_keys($modules_readable_name);
    }

  $form['tu_framework_mod_disable_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Disable All Modules Below on the Next Cron Run'),
  );

  $form['tu_framework_mod_disable_wrapper']['tu_framework_mod_disable_toggle'] = array(
    '#type' => 'checkbox',
    '#title' => 'Select to Disable All Modules Below',
    '#description' => 'De-Select Disable All Option to Allow Modules to be Enabled Below',
    '#default_value' => $toggle_all, //load or don't load?
  );

  $form['tu_framework_mod_disable_each_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose Modules to Disable on the Next Cron Run'),
  );

  $form['tu_framework_mod_disable_each_wrapper']['tu_framework_mod_disable_toggle_each'] = array(
    '#type' => 'checkboxes',
    '#title' =>  '',
    '#description' => 'You Must De-Select Disable All Option to Allow Modules to be Enabled',
    '#options' => $modules_readable_name,
    '#default_value' => $toggle_default,
    '#element_validate' => array('tu_framework_mod_disable_validate'),
  );

 /*
   $form['buttons']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Update'),
  );
  */

  // if($form_state['input']['tu_framework_mod_disable_toggle_each']){
  //   tu_framework_mod_disable_form_submit('tu_framework_mod_disable_settings', $form_state);
  // }
  return system_settings_form($form);
  //return $form;
}

function tu_framework_mod_disable_validate($element, $form_state){
/*global $modules_readable_name;
$modules_included = $modules_readable_name;

  if (!in_array($form_state['values']['tu_framework_mod_disable_toggle_each'], $modules_included)){
    form_error($element, t('You must select a valid module'));
  }
  if ($form_state['values']['tu_framework_mod_disable_toggle_each'] == $toggle_default){
    form_error($element, t('no change submitted'));
  }
*/
//  module_disable(array_keys($form_state['input']['tu_framework_mod_disable_toggle_each']), FALSE);
tu_framework_mod_disable_form_submit('tu_framework_mod_disable_toggle_each', $form_state);
}

function tu_framework_mod_disable_form_submit($form_id, &$form_state){
 variable_set('disable_execute', TRUE);
 drupal_cron_run();
  /* drupal_set_message('Selected Modules Now Disabled');
   dsm($form_state['input']['tu_framework_mod_disable_toggle_each']);
   */
}
